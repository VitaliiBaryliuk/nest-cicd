name: 'nestjs-blue-green-cicd'

variables:
  System.Debug: true    

stages:
# Stage 1: Deploy and Test Initial App Environment
- stage: deploy_initial
  displayName: 'Deploy and Test Initial App Environment'
  jobs:
    - job: deploy_initial_job
      displayName: 'Deploy and Test Blue or Green'
      pool:
        name: 'SelfHostedPool'  # Use your self-hosted pool
      steps:
        # Step 1: Determine Initial Deployment Environment
        - script: |
            if [ "$(terraform output active_app_environment)" = "blue" ]; then
              echo "Traffic is routed to Blue. Deploying to Green."
              echo "##vso[task.setvariable variable=inactiveEnvironment]green"
              echo "##vso[task.setvariable variable=activeEnvironment]blue"
            else
              echo "Traffic is routed to Green. Deploying to Blue."
              echo "##vso[task.setvariable variable=inactiveEnvironment]blue"
              echo "##vso[task.setvariable variable=activeEnvironment]green"
            fi
          displayName: 'Determine Initial Deployment Environment'

        # Step 2: Checkout Repository
        - checkout: self

        # Step 3: Install Dependencies and Build Application (Node.js v20)
        - script: |
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node -v # Display Node.js version to confirm installation
            npm ci
            npm run build
          displayName: 'Install Dependencies and Build Application'
          workingDirectory: $(System.DefaultWorkingDirectory)

        # Step 4: Deploy Application to Inactive App Service
        - task: AzureRmWebAppDeployment@4
          displayName: 'Deploy to $(inactiveEnvironment) App Service'
          inputs:
            azureSubscription: '703d10f6-9dab-4401-ac0f-cade6c18279e'  # Your Azure service connection
            appType: webApp
            WebAppName: $(inactiveEnvironment)-nestjs-app
            packageForLinux: '$(System.DefaultWorkingDirectory)/dist'

        # Step 5: Confirm Test Environment
        - script: |
            echo "Testing the newly deployed environment."
            echo "Access the application at: https://$(inactiveEnvironment)-nestjs-app.azurewebsites.net"
          displayName: 'Notify Testing Status'

# Stage 2: Approval - Switch Traffic or Rollback Decision
- stage: approval_stage
  displayName: 'Approval: Choose Traffic Direction'
  dependsOn: deploy_initial
  jobs:
    - job: approval_job
      displayName: 'Approve Traffic Direction or Rollback'
      pool:
        name: 'SelfHostedPool'
      steps:
        # Step 1: Manual Approval for Traffic Switch or Rollback
        - task: ManualValidation@0
          inputs:
            instructions: |
              Newly deployed environment: $(inactiveEnvironment).
              Current live environment: $(activeEnvironment).
              **Decide:**
              1. Approve to switch traffic to $(inactiveEnvironment).
              2. Reject to rollback traffic back to $(activeEnvironment).
            title: "Traffic Switch Approval or Rollback"

        # Step 2: Conditional Traffic Update Based on Approval
        - script: |
            if [ "$(approval.status)" = "Approved" ]; then
              echo "Switching traffic to $(inactiveEnvironment)."
              cd infra
              terraform plan -var "active_app=$(inactiveEnvironment)" -out=tfplan
              terraform apply tfplan
              echo "##vso[task.setvariable variable=trafficAction]switch"
            else
              echo "Rolling back traffic to $(activeEnvironment)."
              cd infra
              terraform plan -var "active_app=$(activeEnvironment)" -out=tfplan
              terraform apply tfplan
              echo "##vso[task.setvariable variable=trafficAction]rollback"
            fi
          displayName: 'Apply Traffic Changes'

# Stage 3: Final Deployment Synchronization or Rollback Confirmation
- stage: finalize_stage
  displayName: 'Final Steps: Synchronize or Confirm Rollback'
  dependsOn: approval_stage
  jobs:
    - job: finalize_job
      displayName: 'Synchronize Both Environments or Confirm No Action'
      pool:
        name: 'SelfHostedPool'
      steps:
        # Step 1: Determine Action Based on Traffic Decision
        - script: |
            if [ "$(trafficAction)" = "switch" ]; then
              echo "Synchronizing environments. Deploying updated application to $(activeEnvironment)."
              echo "##vso[task.setvariable variable=finalSyncAction]deploy"
            else
              echo "Traffic rollback confirmed. No further action needed."
              echo "##vso[task.setvariable variable=finalSyncAction]none"
            fi
          displayName: 'Decide Final Action'

        # Step 2: Deploy to Remaining Environment (if synchronization needed)
        - task: AzureRmWebAppDeployment@4
          displayName: 'Deploy Sync to $(activeEnvironment)'
          condition: eq(variables['finalSyncAction'], 'deploy')  # Only deploy if synchronization is needed
          inputs:
            azureSubscription: '703d10f6-9dab-4401-ac0f-cade6c18279e'  # Your Azure service connection
            appType: webApp
            WebAppName: $(activeEnvironment)-nestjs-app
            packageForLinux: '$(System.DefaultWorkingDirectory)/dist'

        # Step 3: Confirm Synchronization or Rollback Completion
        - script: |
            if [ "$(finalSyncAction)" = "deploy" ]; then
              echo "Successfully synchronized environments. Both Blue and Green contain the updated application."
            else
              echo "Rollback confirmed. No further deployments occurred."
            fi
          displayName: 'Confirm Final State'