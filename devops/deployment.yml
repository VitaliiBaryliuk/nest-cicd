name: 'nestjs-blue-green-cicd'

variables:
  System.Debug: true    

stages:
# Stage 1: Deploy and Test Initial App Environment
- stage: deploy_initial
  displayName: 'Deploy and Test Initial App Environment'
  jobs:
    - deployment: deploy_initial_job  # Deployment job type
      displayName: 'Deploy and Test Blue or Green'
      environment: 'nest-cicd-prod'  # Ensure this environment exists in Azure DevOps
      pool:
        name: 'SelfHostedPool'  # Replace with your pool
      strategy:
        runOnce:  # Required for deployment jobs; runs once per deployment
          deploy:
            steps:
              # Step 1: Determine Initial Deployment Environment
              - script: |
                  if [ "$(terraform output active_app_environment)" = "blue" ]; then
                    echo "Traffic is routed to Blue. Deploying to Green."
                    echo "##vso[task.setvariable variable=inactiveEnvironment]green"
                    echo "##vso[task.setvariable variable=activeEnvironment]blue"
                  else
                    echo "Traffic is routed to Green. Deploying to Blue."
                    echo "##vso[task.setvariable variable=inactiveEnvironment]blue"
                    echo "##vso[task.setvariable variable=activeEnvironment]green"
                  fi
                displayName: 'Determine Initial Deployment Environment'

              # Step 2: Checkout Repository
              - checkout: self

              # Step 3: Install Dependencies and Build Application (Node.js v20)
              - script: |
                  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                  sudo apt-get install -y nodejs
                  node -v # Display Node.js version to confirm installation
                  npm ci
                  npm run build
                displayName: 'Install Dependencies and Build Application'
                workingDirectory: $(System.DefaultWorkingDirectory)

              # Step 4: Deploy Application to Inactive App Service
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy to $(inactiveEnvironment) App Service'
                inputs:
                  azureSubscription: '703d10f6-9dab-4401-ac0f-cade6c18279e'  # Your Azure service connection ID
                  appType: webApp
                  WebAppName: "$(inactiveEnvironment)-nestjs-app"
                  packageForLinux: "$(System.DefaultWorkingDirectory)/dist"

              # Step 5: Confirm Test Environment
              - script: |
                  echo "Testing the newly deployed environment."
                  echo "Access the application at: https://$(inactiveEnvironment)-nestjs-app.azurewebsites.net"
                displayName: 'Notify Testing Status'

# Stage 2: Approval - Switch Traffic or Rollback
- stage: approval_stage
  displayName: 'Approval: Switch Traffic or Rollback'
  dependsOn: deploy_initial
  jobs:
    - deployment: approval_job  # Deployment job type
      displayName: 'Approve Traffic Switch or Rollback'
      environment: 'nest-cicd-prod'  # Tie approval to the environment
      pool:
        name: 'SelfHostedPool'
      strategy:
        runOnce:
          deploy:
            steps:
              # Step 1: Manual Approval for Traffic Switch or Rollback
              - task: ManualValidation@0
                inputs:
                  instructions: |
                    New Environment: $(inactiveEnvironment)
                    Current Environment: $(activeEnvironment)
                    1. Approve to switch traffic to $(inactiveEnvironment).
                    2. Reject to rollback traffic to $(activeEnvironment).
                  title: 'Traffic Approval or Rollback'

              # Step 2: Conditional Traffic Update Based on Manual Approval
              - script: |
                  if [ "$(approval.status)" = "Approved" ]; then
                    echo "Switching traffic to $(inactiveEnvironment)."
                    cd infra
                    terraform plan -var="active_app=$(inactiveEnvironment)" -out=tfplan
                    terraform apply tfplan
                  else
                    echo "Rolling back traffic to $(activeEnvironment)."
                    cd infra
                    terraform plan -var="active_app=$(activeEnvironment)" -out=tfplan
                    terraform apply tfplan
                  fi
                displayName: 'Apply Traffic Configuration Change'

# Stage 3: Synchronization or Confirm Rollback
- stage: finalize_stage
  displayName: 'Finalize Deployment or Confirm Rollback'
  dependsOn: approval_stage
  jobs:
    - deployment: finalize_job  # Deployment job type for finalizing
      displayName: 'Deploy Final Sync or Confirm Rollback'
      environment: 'nest-cicd-prod'
      pool:
        name: 'SelfHostedPool'
      strategy:
        runOnce:
          deploy:
            steps:
              # Step 1: Synchronize Environments If Needed
              - script: |
                  if [ "$(approval.status)" = "Approved" ]; then
                    echo "Synchronizing environments."
                    echo "##vso[task.setvariable variable=finalSyncAction]deploy"
                  else
                    echo "No synchronization required."
                    echo "##vso[task.setvariable variable=finalSyncAction]none"
                  fi
                displayName: 'Decide Final Action'

              # Step 2: Deploy to Stale Environment (Sync If Needed)
              - task: AzureRmWebAppDeployment@4
                displayName: 'Sync Update to $(activeEnvironment)'
                condition: eq(variables['finalSyncAction'], 'deploy')
                inputs:
                  azureSubscription: '703d10f6-9dab-4401-ac0f-cade6c18279e'
                  appType: webApp
                  WebAppName: "$(activeEnvironment)-nestjs-app"
                  packageForLinux: "$(System.DefaultWorkingDirectory)/dist"

              # Step 3: Completion Notice
              - script: |
                  if [ "$(finalSyncAction)" = "deploy" ]; then
                    echo "Blue and Green environments synchronized."
                  else
                    echo "Rollback confirmed. No changes made to inactive environment."
                  fi
                displayName: 'Complete Finalization'