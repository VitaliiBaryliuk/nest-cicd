name: 'nestjs-blue-green-cicd'

variables:
  System.Debug: true

stages:
# Stage 1: Deploy and Test Initial App Environment
- stage: deploy_initial
  displayName: 'Deploy and Test Initial App Environment'
  jobs:
    - deployment: deploy_initial_job
      displayName: 'Deploy to Inactive Environment'
      environment: 'nest-cicd-prod'  # Ensure this environment exists in Azure DevOps
      pool:
        name: 'SelfHostedPool'  # Use your self-hosted agent pool
      strategy:
        runOnce:
          deploy:
            steps:
              # Step 1: Checkout Repository
              - checkout: self

              # Step 2: Debug Working Directory (Verify Files Exist)
              - task: Bash@3
                inputs:
                  targetType: inline
                  script: |
                    echo "System Default Working Directory: $(System.DefaultWorkingDirectory)"
                    ls $(System.DefaultWorkingDirectory)
                    ls $(System.DefaultWorkingDirectory)/devops/terraform
                displayName: 'Debug Working Directory'

              # Step 3: Determine Active/Inactive Environments
              - task: Bash@3
                inputs:
                  targetType: inline
                  script: |
                    echo "Determining inactive environment..."
                    cd $(System.DefaultWorkingDirectory)/devops/terraform || exit 1
                    active_env=$(terraform output active_app_environment || echo "unknown")

                    if [ "$active_env" = "blue" ]; then
                        echo "Current live environment: Blue"
                        echo "##vso[task.setvariable variable=inactiveEnvironment]green"
                        echo "##vso[task.setvariable variable=activeEnvironment]blue"
                    elif [ "$active_env" = "green" ]; then
                        echo "Current live environment: Green"
                        echo "##vso[task.setvariable variable=inactiveEnvironment]blue"
                        echo "##vso[task.setvariable variable=activeEnvironment]green"
                    else
                        echo "Error: Unable to determine environment."
                        exit 1
                    fi
                displayName: 'Set Active/Inactive Environments'

              # Step 4: Provision Infrastructure Using Terraform
              - task: Bash@3
                inputs:
                  targetType: inline
                  script: |
                    echo "Provisioning infrastructure using Terraform..."
                    cd $(System.DefaultWorkingDirectory)/devops/terraform || exit 1
                    terraform init
                    terraform plan -var="active_app=$(inactiveEnvironment)" -out=tfplan
                    terraform apply -auto-approve tfplan
                displayName: 'Provision Infrastructure'

              # Step 5: Deploy Application to Inactive Environment
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy Application to $(inactiveEnvironment)'
                inputs:
                  azureSubscription: 'AzureServicesConnection'  # Replace with your existing Azure DevOps service connection
                  appType: webApp
                  WebAppName: "$(inactiveEnvironment)-nestjs-app"
                  packageForLinux: "$(System.DefaultWorkingDirectory)/dist"

# Stage 2: Switch Traffic Approval
- stage: approval_stage
  displayName: 'Approval: Switch Traffic or Rollback'
  dependsOn: deploy_initial
  jobs:
    # Step 1: Manual Validation (Server Job)
    - job: approval_job  # Server job for manual validation
      displayName: 'Manual Approval for Traffic Switch'
      pool: server  # Server job does not use an agent
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440
          inputs:
            instructions: |
              Current live environment: $(activeEnvironment)
              New deployment: $(inactiveEnvironment)
              Approve to **switch traffic to $(inactiveEnvironment)**.
              Reject to **keep traffic on $(activeEnvironment)** (rollback).
            notifyUsers: ''
          displayName: 'Approval Step for Traffic Switching'

    # Step 2: Execute Traffic Updates Based on Approval (Agent Job)
    - job: execute_traffic_job
      displayName: 'Execute Traffic Switch or Rollback'
      dependsOn: approval_job  # Depends on ManualValidation outcome
      pool: 'SelfHostedPool'  # Replace with your agent pool for Terraform scripts
      steps:
        # Apply Traffic Update if Approved
        - script: |
            echo "Switching traffic to $(inactiveEnvironment)..."
            terraform plan -var="active_app=$(inactiveEnvironment)" -out=tfplan
            terraform apply -auto-approve tfplan
          displayName: 'Apply Traffic Updates'
          condition: succeeded(dependencies.approval_job)  # Run if ManualValidation was approved

        # Rollback Decision if Rejected
        - script: |
            echo "Rollback triggered: Retaining traffic on $(activeEnvironment)..."
          displayName: 'Rollback Traffic Decision'
          condition: failed(dependencies.approval_job)  # Run if ManualValidation was rejected


# Stage 3: Finalize Deployment or Confirm Rollback
- stage: finalize_stage
  displayName: 'Finalize Deployment or Confirm Rollback'
  dependsOn: approval_stage
  jobs:
    - deployment: finalize_job
      displayName: 'Sync Environments or Confirm Rollback'
      environment: 'nest-cicd-prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  echo "Finalizing deployment based on approval."
                  if [ "$(approval.status)" = "approved" ]; then
                    echo "Syncing inactive environment $(activeEnvironment) with new application version."
                    terraform plan -var="active_app=$(activeEnvironment)" -out=tfplan
                    terraform apply -auto-approve tfplan
                  else
                    echo "Rollback confirmed. No additional changes to environments."
                  fi
                displayName: 'Finalize Sync or Rollback'