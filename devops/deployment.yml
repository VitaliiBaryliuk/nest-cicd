name: 'nestjs-blue-green-cicd'

trigger:
- main

variables:
  azureSubscription: '703d10f6-9dab-4401-ac0f-cade6c18279e'
  resourceGroupName: 'nestjs-cicd-prod-rg'
  webAppName: 'nestjs_cicd_app'
  stagingSlotName: 'nestjs_cicd_app_slot'
  
  poolName: 'SelfHostedPool'
  environmentName: 'nest-cicd-prod'
  nodeVersion: '20-lts'

stages:
# STAGE 1: Build the NestJS Application and create an artifact
- stage: Build
  displayName: 'Build NestJS App'
  jobs:
  - job: BuildJob
    displayName: 'Build and Archive'
    pool:
      name: $(poolName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'Install Dependencies and Build'

    - task: ArchiveFiles@2
      displayName: 'Archive build output'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# STAGE 2: Deploy the artifact to the Staging (Green) Slot
- stage: Deploy_to_Staging
  displayName: 'Deploy to Staging Slot'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging'
    pool:
      name: $(poolName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy NestJS App to Staging Slot'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppName)
              resourceGroupName: $(resourceGroupName)
              slotName: $(stagingSlotName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|$(nodeVersion)'
              startUpCommand: 'npm start' # Assumes 'start' script in your package.json runs the production server
              appSettings: '-PORT 8080' # App Service injects the correct port, but sets it here for consistency.

# STAGE 3: Swap Staging (Green) with Production (Blue)
- stage: Swap_to_Production
  displayName: 'Swap to Production'
  dependsOn: Deploy_to_Staging
  condition: succeeded()
  jobs:
  - deployment: SwapProduction
    displayName: 'Swap Staging with Production'
    pool:
      name: $(poolName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Staging to Production'
            inputs:
              azureSubscription: $(azureSubscription)
              Action: 'Swap Slots'
              WebAppName: $(webAppName)
              ResourceGroupName: $(resourceGroupName)
              SourceSlot: $(stagingSlotName)
              SwapWithProduction: true # This explicitly targets the production slot